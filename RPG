using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BattleManager : MonoBehaviour
{

    public static TurnOrderScript Instance { get; private set; }
    public void TestEndTurn(int turnOrder)
    {
        int TurnOrderScript;
        int v = TurnOrderScript = 0;
        if (v == 0)
        {
            Debug.Log("Successful!");
            turnOrder++;
        }
        else if (TurnOrderScript == 1)
        {
            Debug.Log("Not Found!");
            turnOrder = 0;
        }
    }
}




using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

[CreateAssetMenu(fileName = "CharacterProfile" , menuName = "ScriptableObjects/CharacterProfile")]
public class CharacterProfile : ScriptableObject
{
    public string characterName;
    public Stat health;
    public Stat strength;
    public Stat dexterity;
    public Stat intelligence;
    public int diceRoll;

    public UnitType unitType;
    public List<GameObject> bringIntoBattle;

    public int RollDice()
    {
        diceRoll = Random.Range(1, 20 + 1);
        return diceRoll;
    }
}

public enum UnitType {Player, Ally, Enemy, NPC};


using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

class PartyManager : MonoBehaviour
{
    public static PartyManager Instance { get; private set; }
    public List<GameObject> partyList = new List<GameObject> ();

    private void Awake()
    {
        //Our "GameController" Dependent Addition
        if (this.tag != "GameController")
        {
            Debug.Log("PartyManager on wrong GameObject!");
            Instance = GameObject.FindGameObjectWithTag("GameController").AddComponent<PartyManager>();
            Debug.Log("PartyManager moved to GameController");
            Destroy(this);
        }
        //

        //Normal Singleton
        if (Instance != null && Instance != this)
        {
            Destroy(this);
        }
        else
        {
            Instance = this;
        }
        //
    }

    private void Start()
    {
        InitializeParty();
    }

    public void InitializeParty()
    {
        if (partyList.Count >= 0)
        {
            Debug.Log("Initialize Party");

            
            UnitCharacter[] listHolder;
            listHolder = UnitCharacter.FindObjectsOfType<UnitCharacter>();
            foreach (UnitCharacter unit in listHolder)
            {
                if (unit.characterProfile.unitType == UnitType.Player)
                {
                    partyList.Add(unit.gameObject);
                }
            }
        }
    }
    public void GatherParty(UnitCharacter partyMember)
    {
        //To utilize this we will have o make a saved later that we can grab from.
    }

    public void AddPartyMember(GameObject partyMember)
    {
        if (partyMember != null)
            partyList.Add(partyMember);
    }

    public void RemovePartyMember(GameObject partyMember)
    {
        if (partyMember != null)
            partyList.Remove(partyMember);
    }
}



using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting.Antlr3.Runtime;
using UnityEngine;

[System.Serializable]

public class Stat
{
    [SerializeField]
    private int baseValue;

    public List<int> modifiers = new List<int>();

    public int GetBaseValue()
    {
        return baseValue;

        
    }

    public int GetValue()
    {
        int totalValue = baseValue;
        modifiers.ForEach(x => totalValue += x);
        return totalValue;
    }

    public void AddModifiers(int modifier)
    {
        if (modifier != 0)
            modifiers.Add(modifier);
    }

    public void RemoveModifier(int modifier)
    {
        if (modifier != 0)
            modifiers.Remove(modifier);
    }

}


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class TurnOrderScript : MonoBehaviour
{
    public static TurnOrderScript Instance { get; private set; }
    public List<GameObject> turnOrder = new List<GameObject>();
    public bool battleStarted;

    public void Awake()
    {
        //Our "GameController" Dependent Addition
        if (this.tag != "GameController")
        {
            Debug.Log("PartyManager on wrong GameObject!");
            Instance = GameObject.FindGameObjectWithTag("GameController").AddComponent<TurnOrderScript>();
            Debug.Log("PartyManager moved to GameController");
            Destroy(this);
        }
        //

        //Normal Singleton
        if (Instance != null && Instance != this)
        {
            Destroy(this);
        }
        else
        {
            Instance = this;
        }
        //
    }

    public void GatherUnits(List<GameObject> unitParty)
    {
        if (battleStarted == false)
        {

            //Debuging
            List<GameObject> partyHolder = new List<GameObject>();
            foreach (GameObject unit in unitParty)
            {
                GameObject unitClone = Instantiate(unit, transform.position, transform.rotation); //
                partyHolder.Add(unitClone);
            }
            //

            Debug.Log("Battle Start!");
            battleStarted = true;
            turnOrder.AddRange(partyHolder);
            turnOrder.AddRange(PartyManager.Instance.partyList);

            OrderByDiceRoll();
        }
        
    }

    public void OrderByDiceRoll()
    {
        foreach (var unit in turnOrder)
        {
            unit.GetComponent<UnitCharacter>().characterProfile.RollDice();
        }

        turnOrder = turnOrder.OrderBy(x => x.GetComponent<UnitCharacter>().characterProfile.diceRoll).ToList();
        turnOrder.Reverse();
    }
}


using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class UnitCharacter : MonoBehaviour
{
  public CharacterProfile characterProfile;

    //Debug

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player") && this.characterProfile.unitType == UnitType.Enemy && characterProfile.bringIntoBattle != null)
        {
            TurnOrderScript.Instance.GatherUnits(characterProfile.bringIntoBattle);
        }
    }
}
